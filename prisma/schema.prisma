generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id          String       @id
  title       String       @db.VarChar(255)
  description String
  slug        String       @unique @db.VarChar(255)
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  image       String       @db.VarChar(255)
  userId      String
  Service     Service[]
  Deployment  Deployment[]
}

model Service {
  id                  String                @id
  title               String                @db.VarChar(255)
  slug                String                @unique @db.VarChar(255)
  description         String
  image               String                @db.VarChar(255)
  createdAt           DateTime              @default(now()) @db.Timestamp(6)
  externalUrl         String                @db.VarChar(255)
  readMe              String
  script              String
  port                String?               @db.VarChar(255)
  vendorId            String?
  scriptV2            Json?
  validationUrl       String?               @db.VarChar(255)
  password            String?               @db.VarChar(255)
  instanceSettings    Json?
  EnvironmentVariable EnvironmentVariable[]
  Vendor              Vendor?               @relation(fields: [vendorId], references: [id])
  Deployment          Deployment[]
}

model Deployment {
  id              String    @id
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  // status: 'deployed' | 'booting' | 'booted' | 'validating' | 'complete'
  status          String?   @db.VarChar(255)
  info            Json?
  awsInstanceId   String
  url             String?
  publicDns       String?
  vendorId        String
  serviceId       String
  validationUrl   String?
  userFriendlyUrl String?
  email           String?
  deploymentKey   Json?
  Vendor          Vendor    @relation(fields: [vendorId], references: [id])
  Service         Service   @relation(fields: [serviceId], references: [id])
  Command         Command[]
}

model EnvironmentVariable {
  id        String   @id
  key       String   @db.VarChar(255)
  value     String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  serviceId String?
  Service   Service? @relation(fields: [serviceId], references: [id])
}

// Commands that are issued to the agent on the server to make changes to the deployment of a service
model Command {
  id           String     @id
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  completedAt  DateTime?  @db.Timestamp(6)
  // UPGRADE, ROLLBACK, DEPLOY, DESTROY, RESTART, STOP, START, etc.
  type         String     @db.VarChar(255)
  data         Json?
  // NOT_ACKNOWLEDGED, ACKNOWLEDGED, IN_PROGRESS, COMPLETED, FAILED
  status       String     @db.VarChar(255)
  triggeredBy  String?    @db.VarChar(255)
  deployment   Deployment @relation(fields: [deploymentId], references: [id])
  deploymentId String
}
